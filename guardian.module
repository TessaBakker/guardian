<?php

/**
 * @file
 * Hooks and helpers for Guardian.
 */

/**
 * Implements hook_init().
 *
 * Check guarded user for invalid session, unless it is processing an user/reset link.
 */
function guardian_init() {
  global $user;

  if (_guardian_account_is_guarded($user) && !_guardian_check_valid_session($user) && strpos('user/reset', current_path()) === FALSE) {
    _guardian_destroy_guarded_account($user);
  }
}

/**
 * Implements hook_cron().
 */
function guardian_cron() {
  $account = user_load(1, TRUE);

  $is_valid = _guardian_check_valid_data($account);
  $session_valid = _guardian_check_valid_session($account);

  // Destroy the session after unwanted user change or inactivity.
  if (!$is_valid || $session_valid) {
    _guardian_destroy_guarded_account($account);
  }
}

/**
 * Helper to check for valid Guardian user session lifetime.
 */
function _guardian_check_valid_session($account) {
  return $account->access > (REQUEST_TIME - 3600 * variable_get('guardian_hours', 2));
}

/**
 * Helper to check for valid Guardian user data.
 */
function _guardian_check_valid_data($account) {
  _guardian_cleanup_database_variables();

  $guardian_mail = variable_get('guardian_mail', FALSE);
  $has_init = $account->init == $guardian_mail;
  $has_mail = $account->mail == $guardian_mail;
  $has_empty_pass = empty($account->pass);

  $is_valid = $guardian_mail && $has_init && $has_mail && $has_empty_pass;

  if (!$is_valid) {
    unset($account->password);
    watchdog('guardian', 'Problems with guarded user name <em>@username (id:@uid, mail:@mail, init:@init)</em>', array(
      '@username' => $account->name,
      '@uid' => $account->uid,
      '@mail' => $account->mail,
      '@init' => $account->init,
    ), WATCHDOG_ALERT);

    // Reset the account.
    user_save($account);
  }

  return $is_valid;
}

/**
 * Helper function to destroy all guarded user sessions.
 *
 * @see user_logout()
 */
function _guardian_destroy_guarded_account($account) {

  // Destroy all sessions, saved in the database.
  $session_state = drupal_save_session();
  drupal_save_session(TRUE);
  drupal_session_destroy_uid($account->uid);
  drupal_save_session($session_state);

  // Destroy session of active guarded user.
  if (_guardian_account_is_guarded($account)) {
    watchdog('guardian', 'Session closed for %name.', array('%name' => $account->name));

    module_invoke_all('user_logout', $account);
    session_destroy();

    $hours = variable_get('guardian_hours', 2);
    $message = format_plural($hours,
      'Your last access was more than 1 hour ago, please login again.',
      'Your last access was more than @count hours ago, please login again.', array('@count' => $hours));
    drupal_set_message($message, 'warning');

    drupal_goto('user/password', array('query' => array('destination' => current_path())));
  }
}

/**
 * Implements hook_user_view().
 */
function guardian_user_view($account, $view_mode, $langcode) {
  global $user;

  $profile_user_is_guarded = _guardian_account_is_guarded($account);
  $current_user_is_guarded = _guardian_account_is_guarded($user);

  if ($profile_user_is_guarded && !$current_user_is_guarded) {
    drupal_access_denied();
    drupal_exit();
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form().
 */
function guardian_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  $profile_user_is_guarded = _guardian_account_is_guarded($form['#user']);

  // Don't alter form if profile isn't guarded.
  if (!$profile_user_is_guarded) {
    return;
  }

  $current_user_is_guarded = _guardian_account_is_guarded($user);

  // Show access denied on guarded profile, if current user isn't guarded.
  if (!$current_user_is_guarded) {
    drupal_access_denied();
    drupal_exit();
  }

  // Alter fields.
  if (!empty($form['account'])) {
    foreach (element_get_visible_children($form['account']) as $field) {
      $form['account'][$field]['#disabled'] = TRUE;
      $form['account'][$field]['#description'] = t('Disabled by Guardian.');
    }

    // Deny access to unusable fields.
    $form['account']['pass']['#access'] = FALSE;
    $form['account']['current_pass']['#access'] = FALSE;
    $form['account']['current_pass_required_values']['#access'] = FALSE;
  }
}

/**
 * Implements hook_mail().
 */
function guardian_mail($key, &$message, $params) {
  switch ($key) {
    case 'cron':
    case 'enable':
    case 'disable':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_user_presave().
 *
 * Save guarded profile with default values.
 */
function guardian_user_presave(&$edit, $account, $category) {
  if (_guardian_account_is_guarded($account)) {
    _guardian_cleanup_database_variables();

    $edit['pass'] = '';
    $edit['mail'] = variable_get('guardian_mail', '');
    $edit['init'] = variable_get('guardian_mail', '');
    $edit['status'] = 1;
  }
}

/**
 * Implements hook_mail_alter().
 */
function guardian_mail_alter(&$message) {
  _guardian_cleanup_database_variables();

  $is_password_reset_mail = ($message['id'] == 'user_password_reset');
  $is_guardian_mail = ($message['to'] == variable_get('guardian_mail'));

  if ($is_password_reset_mail && $is_guardian_mail) {
    _guardian_add_metadata_to_body($message['body']);
  }
}

/**
 * Helper to add metadata within the body of an e-mail.
 *
 * @param array $body
 *   Message of mail.
 */
function _guardian_add_metadata_to_body(array &$body) {
  $body[] = t('Client IP: @ip', array('@ip' => ip_address()));
  $body[] = t('Hostname: @host', array('@host' => gethostname()));

  if (drupal_is_cli()) {
    $body[] = t('Terminal user: @user', array('@user' => $_SERVER['USER']));
  }

  drupal_alter('guardian_add_metadata_to_body', $body);
}

/**
 * Checks if account is guarded.
 */
function _guardian_account_is_guarded($account) {

  // The uid might not be available at this point, for example in a user
  // migration.
  if (!isset($account->uid)) {
    return FALSE;
  }

  // Type casting, because uid is not always an integer and can't be a boolean.
  return (string) $account->uid === '1';
}

/**
 * Remove any guardian variable in the database.
 *
 * Every variable must be set within settings.php.
 */
function _guardian_cleanup_database_variables() {
  global $conf;

  $count = db_delete('variable')
    ->condition('name', array('guardian_mail', 'guardian_hours'), 'IN')
    ->execute();

  // Unset everything if one or more variables were saved in the database.
  if ($count > 0) {
    cache_clear_all('variables', 'cache_bootstrap');
    unset($conf['guardian_mail'], $conf['guardian_hours']);
  }
}
